package com.air.airquality.controller;

import com.air.airquality.dto.AqiResponse;
import com.air.airquality.services.AqiService;
import com.air.airquality.services.OpenAQService;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.HttpServletRequest;
import java.io.ByteArrayOutputStream;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;

@RestController
@RequestMapping("/api/export")
public class DataExportController {

    @Autowired
    private AqiService aqiService;

    @Autowired
    private OpenAQService openAQService;

    @GetMapping("/pdf")
    public ResponseEntity<byte[]> exportToPDF(
            @RequestParam String city,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate,
            HttpServletRequest request) {
        try {
            String userId = request.getHeader("X-User-Id");
            if (userId == null || userId.isEmpty()) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body("PDF export requires user authentication".getBytes());
            }
            if (endDate == null) endDate = LocalDateTime.now();
            if (startDate == null) startDate = endDate.minusDays(7);

            Document document = new Document();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PdfWriter.getInstance(document, baos);
            document.open();

            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18, BaseColor.DARK_GRAY);
            Paragraph title = new Paragraph("Air Quality Report - " + city, titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            title.setSpacingAfter(20);
            document.add(title);

            Font infoFont = FontFactory.getFont(FontFactory.HELVETICA, 10, BaseColor.GRAY);
            Paragraph info = new Paragraph(
                    "Generated on: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) +
                            "\nReport Period: " + startDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")) +
                            " to " + endDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")) +
                            "\nGenerated by: AirSight Monitoring System",
                    infoFont
            );
            info.setAlignment(Element.ALIGN_CENTER);
            info.setSpacingAfter(20);
            document.add(info);

            try {
                var currentData = openAQService.getCurrentAqiData(city);
                Font sectionFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14, BaseColor.BLACK);
                Paragraph currentSection = new Paragraph("Current Air Quality Status", sectionFont);
                currentSection.setSpacingBefore(10);
                currentSection.setSpacingAfter(10);
                document.add(currentSection);

                PdfPTable currentTable = new PdfPTable(2);
                currentTable.setWidthPercentage(100);
                currentTable.setSpacingAfter(20);

                addTableRow(currentTable, "City", currentData.getCity());
                addTableRow(currentTable, "AQI Value", String.valueOf(currentData.getAqiValue()));
                addTableRow(currentTable, "Category", openAQService.getAqiCategory(currentData.getAqiValue()));
                addTableRow(currentTable, "PM2.5 (µg/m³)", formatValue(currentData.getPm25()));
                addTableRow(currentTable, "PM10 (µg/m³)", formatValue(currentData.getPm10()));
                addTableRow(currentTable, "NO2 (µg/m³)", formatValue(currentData.getNo2()));
                addTableRow(currentTable, "SO2 (µg/m³)", formatValue(currentData.getSo2()));
                addTableRow(currentTable, "CO (mg/m³)", formatValue(currentData.getCo()));
                addTableRow(currentTable, "O3 (µg/m³)", formatValue(currentData.getO3()));

                document.add(currentTable);
            } catch (Exception e) {
                document.add(new Paragraph("Current data unavailable"));
            }

            try {
                List<AqiResponse> historicalData = aqiService.getHistoricalData(city, startDate, endDate);
                if (!historicalData.isEmpty()) {
                    Font sectionFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14, BaseColor.BLACK);
                    Paragraph historySection = new Paragraph("Historical Data Summary", sectionFont);
                    historySection.setSpacingBefore(20);
                    historySection.setSpacingAfter(10);
                    document.add(historySection);

                    double avgAqi = historicalData.stream().mapToInt(AqiResponse::getAqiValue).average().orElse(0.0);
                    int maxAqi = historicalData.stream().mapToInt(AqiResponse::getAqiValue).max().orElse(0);
                    int minAqi = historicalData.stream().mapToInt(AqiResponse::getAqiValue).min().orElse(0);

                    PdfPTable statsTable = new PdfPTable(2);
                    statsTable.setWidthPercentage(100);

                    addTableRow(statsTable, "Total Records", String.valueOf(historicalData.size()));
                    addTableRow(statsTable, "Average AQI", String.format("%.1f", avgAqi));
                    addTableRow(statsTable, "Maximum AQI", String.valueOf(maxAqi));
                    addTableRow(statsTable, "Minimum AQI", String.valueOf(minAqi));

                    document.add(statsTable);
                }
            } catch (Exception e) {
                document.add(new Paragraph("Historical data unavailable for the selected period"));
            }

            document.add(new Paragraph("\n"));
            Font sectionFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14, BaseColor.BLACK);
            Paragraph healthSection = new Paragraph("Health Recommendations", sectionFont);
            healthSection.setSpacingBefore(20);
            healthSection.setSpacingAfter(10);
            document.add(healthSection);

            Font normalFont = FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK);
            String healthText =
                    "• Monitor air quality regularly, especially if you have respiratory conditions\n" +
                            "• Consider wearing masks when AQI is above 100\n" +
                            "• Limit outdoor activities when AQI is above 150\n" +
                            "• Use air purifiers indoors during high pollution periods\n" +
                            "• Stay hydrated and maintain a healthy diet rich in antioxidants";

            Paragraph healthPara = new Paragraph(healthText, normalFont);
            document.add(healthPara);

            document.close();
            byte[] pdfContent = baos.toByteArray();

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.setContentDispositionFormData("attachment",
                    "air-quality-report-" + city + "-" +
                            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")) + ".pdf");
            headers.setContentLength(pdfContent.length);

            return ResponseEntity.ok().headers(headers).body(pdfContent);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(("Error generating PDF report: " + e.getMessage()).getBytes());
        }
    }

    @GetMapping("/csv")
    public ResponseEntity<String> exportToCSV(
            @RequestParam String city,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate,
            HttpServletRequest request) {
        try {
            String userId = request.getHeader("X-User-Id");
            if (userId == null || userId.isEmpty()) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body("CSV export requires user authentication");
            }
            List<AqiResponse> historicalData = aqiService.getHistoricalData(city, startDate, endDate);
            StringBuilder csv = new StringBuilder();
            csv.append("Timestamp,City,AQI,Category,PM2.5,PM10,NO2,SO2,CO,O3\n");
            for (AqiResponse data : historicalData) {
                csv.append(data.getTimestamp().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                        .append(",").append(data.getCity())
                        .append(",").append(data.getAqiValue())
                        .append(",").append(openAQService.getAqiCategory(data.getAqiValue()))
                        .append(",").append(formatValue(data.getPm25()))
                        .append(",").append(formatValue(data.getPm10()))
                        .append(",").append(formatValue(data.getNo2()))
                        .append(",").append(formatValue(data.getSo2()))
                        .append(",").append(formatValue(data.getCo()))
                        .append(",").append(formatValue(data.getO3()))
                        .append("\n");
            }
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.TEXT_PLAIN);
            headers.setContentDispositionFormData("attachment",
                    "air-quality-data-" + city + "-" +
                            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")) + ".csv");
            return ResponseEntity.ok().headers(headers).body(csv.toString());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error generating CSV report: " + e.getMessage());
        }
    }

    private void addTableRow(PdfPTable table, String label, String value) {
        Font labelFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.BLACK);
        Font valueFont = FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.DARK_GRAY);
        PdfPCell labelCell = new PdfPCell(new Phrase(label, labelFont));
        labelCell.setBorder(Rectangle.NO_BORDER);
        labelCell.setPadding(5);
        PdfPCell valueCell = new PdfPCell(new Phrase(value, valueFont));
        valueCell.setBorder(Rectangle.NO_BORDER);
        valueCell.setPadding(5);
        table.addCell(labelCell);
        table.addCell(valueCell);
    }

    private String formatValue(Double value) {
        return value != null ? String.format("%.2f", value) : "N/A";
    }
}